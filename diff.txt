diff --git a/docs/06-game-over.md b/docs/06-game-over.md
new file mode 100644
index 0000000..e69de29
diff --git a/src/app/game/[gameId]/page.tsx b/src/app/game/[gameId]/page.tsx
index f594326..ddf5238 100644
--- a/src/app/game/[gameId]/page.tsx
+++ b/src/app/game/[gameId]/page.tsx
@@ -8,17 +8,20 @@ export default async function GamePage({
 }: {
   params: { gameId: number };
 }) {
+  const game = await api.games.getById(gameId);
   const guesses = await api.guesses.findByGameId(gameId);
 
   return (
     <GuessProvider>
       <div className="flex h-full flex-col items-center gap-6">
         <div className="flex flex-1 items-center justify-center">
-          <GameBoard gameId={gameId} guesses={guesses} />
-        </div>
-        <div className="flex w-full max-w-3xl items-center">
-          <GuessKeyboard gameId={gameId} />
+          <GameBoard gameId={gameId} status={game.status} guesses={guesses} />
         </div>
+        {game.status === "in_progress" && (
+          <div className="flex w-full max-w-3xl items-center">
+            <GuessKeyboard gameId={gameId} />
+          </div>
+        )}
       </div>
     </GuessProvider>
   );
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 4d2e298..0311d97 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -1,20 +1,16 @@
 "use client";
 
-import { useRouter } from "next/navigation";
-
 import { Button } from "~/components/ui/button";
-import { api } from "~/server/api";
+import { useCreateGame } from "~/lib/hooks/use-create-game";
 
 export default function HomePage() {
-  const router = useRouter();
+  const createGame = useCreateGame();
 
   return (
     <main className="flex h-full items-center justify-center">
       <Button
         onClick={async () => {
-          const game = await api.games.create();
-
-          router.push(`/game/${game.id}`);
+          await createGame();
         }}
       >
         New game
diff --git a/src/components/game-board.tsx b/src/components/game-board.tsx
index 61d89d6..aa5141b 100644
--- a/src/components/game-board.tsx
+++ b/src/components/game-board.tsx
@@ -1,18 +1,22 @@
 import { type api } from "~/server/api";
+import { type games } from "~/server/db/schema";
 
+import { GameResults } from "./game-results";
 import { GuessInput } from "./guess-input";
 import { GuessList } from "./guess-list";
 
 type GameBoardProps = {
   gameId: number;
+  status: (typeof games.status.enumValues)[number];
   guesses: Awaited<ReturnType<typeof api.guesses.findByGameId>>;
 };
 
-export const GameBoard = ({ gameId, guesses }: GameBoardProps) => {
+export const GameBoard = ({ gameId, status, guesses }: GameBoardProps) => {
   return (
-    <div className="flex grow flex-col items-center gap-3">
+    <div className="flex grow flex-col items-center gap-6">
       <GuessList guesses={guesses} />
-      <GuessInput gameId={gameId} />
+      {status === "in_progress" && <GuessInput gameId={gameId} />}
+      <GameResults status={status} />
     </div>
   );
 };
diff --git a/src/components/game-results.tsx b/src/components/game-results.tsx
new file mode 100644
index 0000000..a79e051
--- /dev/null
+++ b/src/components/game-results.tsx
@@ -0,0 +1,43 @@
+"use client";
+
+import { useCreateGame } from "~/lib/hooks/use-create-game";
+import { type games } from "~/server/db/schema";
+
+import { Button } from "./ui/button";
+
+type GameResultsProps = {
+  status: (typeof games.status.enumValues)[number];
+};
+
+const PlayAgainButton = () => {
+  const createGame = useCreateGame();
+
+  return (
+    <Button size="lg" onClick={createGame}>
+      Play again!
+    </Button>
+  );
+};
+
+export const GameResults = ({ status }: GameResultsProps) => {
+  switch (status) {
+    case "in_progress":
+      return null;
+    case "won":
+      return (
+        <div className="flex flex-col gap-6">
+          <div className="text-3xl font-bold text-green-400">
+            Bam! You won! ðŸŽ‰
+          </div>
+          <PlayAgainButton />
+        </div>
+      );
+    case "lost":
+      return (
+        <div className="flex flex-col gap-6">
+          <div className="text-3xl font-bold text-red-400">You lost! ðŸ˜­</div>
+          <PlayAgainButton />
+        </div>
+      );
+  }
+};
diff --git a/src/lib/hooks/use-create-game.ts b/src/lib/hooks/use-create-game.ts
new file mode 100644
index 0000000..44195a8
--- /dev/null
+++ b/src/lib/hooks/use-create-game.ts
@@ -0,0 +1,17 @@
+import { useRouter } from "next/navigation";
+
+import { api } from "~/server/api";
+
+export const useCreateGame = (withRedirect = true) => {
+  const router = useRouter();
+
+  return async () => {
+    const game = await api.games.create();
+
+    if (withRedirect) {
+      router.push(`/game/${game.id}`);
+    }
+
+    return game;
+  };
+};
diff --git a/src/server/services/guess.service.ts b/src/server/services/guess.service.ts
index 4516514..1046541 100644
--- a/src/server/services/guess.service.ts
+++ b/src/server/services/guess.service.ts
@@ -1,8 +1,9 @@
-import { asc, eq } from "drizzle-orm";
+import { asc, count, eq } from "drizzle-orm";
 import { revalidatePath } from "next/cache";
 
 import { db } from "../db";
 import { games, guesses } from "../db/schema";
+import { gameService } from "./game.service";
 
 const checkGuess = async (guess: string, gameId: number) => {
   const game = await db.query.games.findFirst({
@@ -55,6 +56,16 @@ const create = async (guess: string, gameId: number) => {
     throw new Error("Failed to create guess");
   }
 
+  const count = await countByGameId(gameId);
+
+  if (count === 6 && createdGuess.result.includes("X")) {
+    await gameService.update(gameId, "lost");
+  }
+
+  if (createdGuess.result === "CCCCC") {
+    await gameService.update(gameId, "won");
+  }
+
   revalidatePath(`/game/${gameId}`);
 
   return createdGuess;
@@ -67,6 +78,19 @@ const findByGameId = async (gameId: number) => {
   });
 };
 
+const countByGameId = async (gameId: number) => {
+  const [gameCount] = await db
+    .select({ count: count() })
+    .from(guesses)
+    .where(eq(guesses.gameId, gameId));
+
+  if (!gameCount) {
+    throw new Error("Error counting guesses");
+  }
+
+  return gameCount.count;
+};
+
 export const guessService = {
   create,
   findByGameId,
