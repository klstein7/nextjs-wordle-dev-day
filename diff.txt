diff --git a/docs/05-word-validation.md b/docs/05-word-validation.md
new file mode 100644
index 0000000..e69de29
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index c3dc2a3..81af778 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -3,6 +3,8 @@ import "~/styles/globals.css";
 import { GeistSans } from "geist/font/sans";
 import { type Metadata } from "next";
 
+import { Toaster } from "~/components/ui/sonner";
+
 export const metadata: Metadata = {
   title: "Wordle Clone",
   description: "Our awesome wordle clone",
@@ -15,6 +17,7 @@ export default function RootLayout({
   return (
     <html lang="en" className={`${GeistSans.variable} dark`}>
       <body className="h-screen">{children}</body>
+      <Toaster closeButton={true} expand={true} visibleToasts={4} />
     </html>
   );
 }
diff --git a/src/components/guess-input.tsx b/src/components/guess-input.tsx
index 1131edc..a1973f4 100644
--- a/src/components/guess-input.tsx
+++ b/src/components/guess-input.tsx
@@ -2,8 +2,8 @@
 
 import { REGEXP_ONLY_CHARS } from "input-otp";
 
+import { useCreateGuess } from "~/lib/hooks/use-create-guess";
 import { useGuess } from "~/lib/hooks/use-guess";
-import { api } from "~/server/api";
 
 import { InputOTP, InputOTPGroup, InputOTPSlot } from "./ui/input-otp";
 
@@ -14,6 +14,8 @@ type GuessInputProps = {
 export const GuessInput = ({ gameId }: GuessInputProps) => {
   const { guess, setGuess } = useGuess();
 
+  const createGuess = useCreateGuess();
+
   return (
     <InputOTP
       maxLength={5}
@@ -22,8 +24,7 @@ export const GuessInput = ({ gameId }: GuessInputProps) => {
       onChange={(value) => setGuess(value)}
       onKeyDown={async (e) => {
         if (e.key === "Enter") {
-          await api.guesses.create(guess, gameId);
-          setGuess("");
+          await createGuess(guess, gameId);
         }
       }}
     >
diff --git a/src/components/guess-item.tsx b/src/components/guess-item.tsx
index 0778cb3..0ede1b7 100644
--- a/src/components/guess-item.tsx
+++ b/src/components/guess-item.tsx
@@ -9,21 +9,29 @@ type GuessItemProps = {
   guess: Awaited<ReturnType<typeof api.guesses.findByGameId>>[number];
 };
 
-const GuessItemSlot = ({ index }: { index: number }) => {
+function GuessItemSlot({ index, result }: { index: number; result: string }) {
   return (
     <InputOTPSlot
       index={index}
-      className={cn("h-12 w-12 text-2xl uppercase")}
+      className={cn("h-12 w-12 text-2xl uppercase", {
+        "bg-red-500 text-red-50": result === "X",
+        "bg-green-500 text-green-50": result === "C",
+        "bg-yellow-500 text-yellow-50": result === "~",
+      })}
     />
   );
-};
+}
 
 export const GuessItem = ({ guess }: GuessItemProps) => {
   return (
     <InputOTP readOnly maxLength={5} value={guess.guess}>
       <InputOTPGroup>
         {[0, 1, 2, 3, 4].map((index) => (
-          <GuessItemSlot key={index} index={index} />
+          <GuessItemSlot
+            key={index}
+            index={index}
+            result={guess.result[index] ?? ""}
+          />
         ))}
       </InputOTPGroup>
     </InputOTP>
diff --git a/src/components/guess-keyboard.tsx b/src/components/guess-keyboard.tsx
index 61870ab..0ea4f97 100644
--- a/src/components/guess-keyboard.tsx
+++ b/src/components/guess-keyboard.tsx
@@ -4,8 +4,8 @@ import "react-simple-keyboard/build/css/index.css";
 
 import Keyboard from "react-simple-keyboard";
 
+import { useCreateGuess } from "~/lib/hooks/use-create-guess";
 import { useGuess } from "~/lib/hooks/use-guess";
-import { api } from "~/server/api";
 
 type GuessKeyboardProps = {
   gameId: number;
@@ -14,6 +14,8 @@ type GuessKeyboardProps = {
 export const GuessKeyboard = ({ gameId }: GuessKeyboardProps) => {
   const { guess, setGuess } = useGuess();
 
+  const createGuess = useCreateGuess();
+
   return (
     <Keyboard
       theme="hg-theme-default !bg-secondary/75"
@@ -39,8 +41,7 @@ export const GuessKeyboard = ({ gameId }: GuessKeyboardProps) => {
         }
 
         if (input === "{enter}") {
-          await api.guesses.create(guess, gameId);
-          setGuess("");
+          await createGuess(guess, gameId);
           return;
         }
 
diff --git a/src/lib/hooks/use-create-guess.ts b/src/lib/hooks/use-create-guess.ts
new file mode 100644
index 0000000..a487ba3
--- /dev/null
+++ b/src/lib/hooks/use-create-guess.ts
@@ -0,0 +1,37 @@
+import { REGEXP_ONLY_CHARS } from "input-otp";
+import { toast } from "sonner";
+import { z } from "zod";
+
+import { api } from "~/server/api";
+
+import { isValidWord } from "../utils";
+import { useGuess } from "./use-guess";
+
+const CreateGuessSchema = z.object({
+  guess: z
+    .string()
+    .length(5, "Guess must be 5 characters long")
+    .refine((value) => new RegExp(REGEXP_ONLY_CHARS).test(value), {
+      message: "Guess must contain only letters",
+    })
+    .refine((value) => isValidWord(value), {
+      message: "Guess must be a valid word",
+    }),
+  gameId: z.union([z.string(), z.number()]).transform((value) => Number(value)),
+});
+
+export const useCreateGuess = () => {
+  const { setGuess } = useGuess();
+
+  return async (guess: string, gameId: number) => {
+    const result = CreateGuessSchema.safeParse({ guess, gameId });
+    if (!result.success) {
+      result.error.errors.forEach((error) => {
+        toast.error(error.message);
+      });
+      return;
+    }
+    await api.guesses.create(guess, gameId);
+    setGuess("");
+  };
+};
diff --git a/src/lib/utils.ts b/src/lib/utils.ts
index 9e18f94..53e84d8 100644
--- a/src/lib/utils.ts
+++ b/src/lib/utils.ts
@@ -15,3 +15,7 @@ export function getRandomWord() {
   }
   return word;
 }
+
+export function isValidWord(word: string) {
+  return words.includes(word.toLowerCase());
+}
